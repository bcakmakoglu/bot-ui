service: bot-api

useDotenv: true

plugins:
  - serverless-webpack
  - serverless-offline
  # Workaround for serverless-offline hot-reload
  # See https://github.com/dherault/serverless-offline/issues/931
  # and https://github.com/dherault/serverless-offline/pull/978
  - ./utils/sls-invalidate

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  memorySize: 256
  tracing:
    apiGateway: true
    lambda: true
  httpApi:
    payload: '2.0'
    cors:
      allowedOrigins: '*'
      allowedHeaders:
        - Content-Type: application/json
        - X-Amz-Date
        - Authorization
        - X-Amz-Security-Token
        - X-Amz-User-Agent
        - Access-Control-Allow-Origin
        - Access-Control-Allow-Credentials
        - Access-Control-Allow-Methods
  environment:
    SLS_STAGE: ${self:provider.stage}
    SLS_SERVICE: ${self:service}
    IS_OFFLINE: ${env:OFFLINE}
    AWS_ENDPOINT: ${env:AWS_ENDPOINT}

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    packager: yarn
    includeModules:
      forceExclude:
        - aws-sdk
  serverless-offline:
    corsAllowHeaders: 'accept,content-type,authorization,Access-Control-Allow-Origin,Access-Control-Allow-Methods'
    corsAllowOrigin: '*'
    useChildProcesses: true
    # set host to 0.0.0.0 for docker container
    host: ${env:HOST}

functions:
  auth:
    handler: api/auth.default
    events:
      - httpApi:
          method: 'POST'
          path: /auth
          cors: true
  refresh-token:
    handler: api/refresh-token.default
    events:
      - httpApi:
          method: 'GET'
          path: /refresh-token
          cors: true
